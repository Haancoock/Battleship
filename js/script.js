var Module = (function(){
	// Все необходимые переменные 
	var inputName = document.querySelector('.name-input'),// Инпут ввода Имени
		infoBar = document.querySelector('.infobar-text'), // Информационная строка сверху
		restartButton = document.querySelector('.restart'); // Кнопка для рестарта игры 
		startButton = document.getElementById('start'), // Кнопка старта игры
		cheatButton = document.getElementById('cheater') // Кнопка для отображения кораблей компа
		compFieldId = '#compField', // Айди обертки поля боя компьютера и игрока
		playerFieldId = '#playerField', // нужно для удобной работы с селекторами jQuery
		fields = document.querySelectorAll('.battlefield-grid'); // Массив из оберток двух полей  

	// Главная функция которая будет возвращена в объекте
	var gameStart = () => {
		_createFields()// Функция создает поле боя игрока и компьютера
		_createAroundText(); //Вызвает функцию для вывода букв и цифр по краям поля боя
		_eventListeners(); //Вызывает прослушку событий
		

	}
	// Функция отвечает за прослушку всех событий которые происходят на странице
	var _eventListeners = () => {
		inputName.addEventListener('keyup', _changePlayerName); // Добавляет события по вводу имени
		startButton.addEventListener('click', _battleBegins); // Начинает игру
		restartButton.addEventListener('click', _battleBegins); // Начинает заново
		cheatButton.addEventListener('click', function(){
			_fillTheOneField('cheater');
		}); // Показывает корабли компа
	}

	//Функция отвечает за начало игры
	var _battleBegins = function(){
		_createFields(); // Создает/пересоздает 2 поля боя
		_createShips(); // Создает и размещает корабли
		_fillTheFields(); // Проверяет ячейки на пустоту и заполняет
	}

	// Функция проверяет ячейки и если они пустые(не имеют ни одного класса кроме .Cell) то заполняет их 
	// классом wather
	var _fillTheFields = function(){
		var fieldsIdArray = []; // Массив в который добавятся айдишники полей 
		fieldsIdArray = [playerField, compFieldId]; // с помощью реструктуризации массив получает айдишники
		 //Запускается цикл который перебирает элементы массива с айдишниками и для каждого вызывает функцию
		 //проверки/наполнения одного поля
		 for(var i = 0; i < fieldsIdArray.length; i++){ 
		 	_fillTheOneField(fieldsIdArray[i]); // вызывается функция с аргументом айди поля
		 }
	}

	//Функция которая отвечает за проверку и наполнение водой одного поля боя а так же за кнопку Чит
	// в аргумент получает айди поля боя которое надо проверить
	var _fillTheOneField = function(fieldId){
		// Запускается цикл для каждой ячеейки в поле боя, айди которого было передано
		for(var i= 0; i < 100; i++){
			// Условие проверяет, является ли переданное значение fieldId - cheater
			//т.е проверяет, была ли передана переменная при нажатии на кнопку Чит
			// что бы отобразить все корабли компьютера
			if(fieldId === 'cheater'){ // если является
				// Условие проверяет, имеет ли итерируемая ячейка класс корабля
				// и класс который скрывает корабль на поле боя компьютера водой
				if($('#compField #cell' +i).hasClass('ship') && $('#compField #cell'+i).hasClass('water')){
					// Если условие верно то убрать все лишние классы и добавить класс отображение корабля
					// т.е показать корабль на поле боя компьютера
					$('#compField #cell'+i).removeClass('shipTag water shotMiss shotHit').addClass('shipTag');
				//второе условие проверяет, имеет ли ячейка класс который отображает попадание по кораблю
				}else if($('#compField #cell'+i).hasClass('shotHit')){
					//если да, то ничего не делать и перенестись к финальному выражению цикла
					continue;
				//третье условие проверяет, имеет ли ячейка класс который показывает промах на поле боя
				}else if($('#compField #cell'+i).hasClass('shotMiss')){
					//если да, то ничего не делать и перенестись к финальному выражению цикла
					continue;
				// Во всех остальных случаях просто наполняем ячейки водой 
				}else{
					// Удаление всех классов перед присвоением делается для того что бы ячейки перезаписывались
					// при каждом клике на кнопку и не было конфликтов между классами 
					$('#compField #cell'+i).removeClass('shipTag water shotMiss shotHit').addClass('water');
				}
			// Если же в аргументы был передан один из айдишников полей боя
			}else{
				// Проверяем, имеет ли данная ячейка на поле боя компьютера класс корабля
				//т.е находится ли палуба корабля внутри ячейки
				if($('#compField #cell'+i).hasClass('ship')){
					//Если да, то удаляем все классы отвечающие за визуализацию, оставляя "ship"
					// и закрашиваем эту ячейку водой(делаем невидимой)
					$('#compField #cell'+i).removeClass('shipTag water shotMiss shotHit').addClass('water');
					// так же вешаем на данную ячейку обработчик кликов
					// если игрок нажмет на эту ячейку, то вызовет функцию выстрела, которая в аргументы
					// получит айди поля данной ячейки и hit(обозначающую попадание)
					$('#compField #cell'+i).click(function(){
						_playerShot(this, 'hit'); // вызываем функцию которой передаем информацию о попадании
					});
				//если нет, то все так же вешаем на ячейку обработчик кликов
				}else{
					$('#compField #cell'+i).click(function(){
						_playerShot(this, 'miss'); // Но в этот раз передаем информацию о промахе
					});
				}
			}
		}
	}
	// Функция которая отвечает за "выстрел" игрока, точнее за обработку события клика по ячейке 
	// которое вызывается из функции _FillTheOneField()
	// в качестве аргументов получает айди ячейки и строковое значение miss/hit
	var _playerShot = function(cellId, shotValue){
		// Запускается проверка
		// Если у этой ячейки есть классы отвечающие за отображение попадания или промаха
		// или ячейка имеет системный класс отвечающий за наличие палубы и одновременно с этим
		// данная ячейка находится на поле боя компьютера
		// то мы ничего не делаем :) это обработка повторного клика на то же самое поле
		if(($(cellId).hasClass('shotHit'))||($(cellId).hasClass('shotMiss'))||
		($(cellId).hasClass('ship')) && ($(cellId).parent(compField))){
			//ничего..
		// Иначе, т.е если клик произошел по новой ячейки которая является просто водой
		// другими словами если игрок промахнулся
		}else{
			_compShot(); // Вызывается функция отвечающая за выстрел компьютера
		}

		// Запускается проверка на попадание или промах
		if(shotValue === 'hit'){ // Если в функцию пришел аргумент с попаданием
			//Сбросить с данной ячейки все визуальные стили и установить стиль отвечающий за попадание
			$(cellId).removeClass('shipTag water shotMiss shotHit').addClass('shotHit');
		}
		if(shotValue === 'miss'){ // Если же игрок промахнулся 
			// Так же сбрасываем с ячейки все стили и добавляем стиль отвечающий за промах
			$(cellId).removeClass('shipTag water shotMiss shotHit').addClass('shotMiss');
		}
		// В конце запускаем функцию проверки победителя
		_whoisWinner();
	}

	//Функция отвечает за выстрел компьютера и может принимать аргументы к которым можно будет
	//обратиться через arguments
	var _compShot = function(){
		// Устанавливается переменная которая будет содержать в себе массив номеров ячеек 
		// массив нужен для выстрелов компьютера по ячейкам
		var cellsArr = [];
		//проводим массив по циклу, наполняя его элементами
		for(var i = 0; i < 100; i++){
			cellsArr[i] = i;
		} 
		// В самом начале запускается функция для отображения чей ход в информационной панели
		//в аргумент передается информация что сейчас ход компьютера
		_turn('compTurn');
		// Устанавливается переменная которая будет отвечать за рандомный выстрел компьютера по клетке
		// в переменную записывается рандомное значение от 0 до 99, т.к длинна массива 100
		// из него вычитается 1
		var shotPoint = _randomInteger(0, cellsArr.length - 1);
		//Произовдится проверка на "попадание" компьютера через arguments
		if(arguments[0] === 'luckyshot'){// если попал
			//присваиваем к переменной выстрела по ячейке предыдущее её значение
			shotPoint = arguments[1]; 
			// проверяется переменная, что бы не число не превышало 100
			if(Math.floor(shotPoint/10)> 9){
				shotPoint = arguments[1] - 1; // присваивается значение 99
			}
		}
		//После выстрела, ячейка по которой был произведен выстрел убирается из массива
		// что бы компьютер не стрелял в одно и то же место дважды
		cellsArr.splice(shotPoint, 1);
		// Объявляется переменная ячейки в поле боя игрока, что бы с ней было легче работать
		var cell='#playerField #cell'+ cellsArr[shotPoint];
		// Логика отвечающая за выбор сложности компьютера, через селект, легко/нормально/сложно
		var randomLvl = _randomInteger(0,2) // присваиваем переменной случайное значение для установки уровня
		// Запускаем проверку
		// если рандомное число больше чем выбранная сложность
		// сложность считается как 0 - сложно, 1 - норм, 2 -сложно
		// и ячейка игрока является пустой(не корабль и не попадание/промах)
		if(randomLvl > $('select').val() && $(cell).hasClass('water')){
				// меняем ячейку и закидываем в неё первую ячейку с классом корабля
				//т.е помещаем в переменную ячейку с кораблем что бы обеспечить попадание компьютера
				cell= '#' + $('.shipTag:first').attr('id');
				//Удаляем номер ячейки из массива
				cellsArr.splice(shotPoint, 1);
		}
		// Задается setTimeout что бы имитировать размышление компьютера перед выстрелом
		setTimeout(function(){
			// Если ячейка является кораблем, т.е компьютер попал
			if($(cell).hasClass('ship')){
				// Затираем все классы и присваиваем класс попаадания
				$(cell).removeClass('shipTag water shotMiss shotHit').addClass('shotHit');
				//вызываем функцию выстрела компьютера по новой, т.к он попал
				// передавая в параметры 2 аргументы к которым будем обращаться через arguments
				// в первый аргумент передаем информацию о попадани
				//во второй передаем число
				_compShot();
			}
			//если же компьютер промахнулся 
			else {
				// очищаем все классы и присваиваем ячейке по которой он стрелял класс отвечающий за промах
				$(cell).removeClass('shipTag water shotMiss shotHit').addClass('shotMiss');
			}
			// во время хода компьютера блокиратор кликов всплывает и не дает нажимать на его поле боя
			$('#compFieldBlocker').toggle();
			// запускается функция для отображения чей ход в информационной панели
			//в аргумент передается информация что сейчас ход игрока, т.к пк промахнулся
			_turn('playerTurn');
		}, _randomInteger(500, 1000)); // Компьютер рандомно думает 1sec
	}


	return {
		gameStart: gameStart
	}
})();


Module.gameStart();